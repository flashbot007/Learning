import "iconify-icon";
import { defineComponent as U, toRefs as V, computed as t, openBlock as d, createElementBlock as u, normalizeClass as H, Fragment as w, renderSlot as f, createCommentVNode as M, createElementVNode as C } from "vue";
const O = U({
  name: "UiButton",
  props: {
    size: {
      type: String,
      required: !1,
      default: "md",
      validator(e) {
        return ["xs", "sm", "md", "lg", "xl"].includes(e);
      }
    },
    color: {
      type: String,
      required: !1,
      default: "primary",
      validator(e) {
        return [
          "primary",
          "secondary",
          "success",
          "warning",
          "error",
          "gradient"
        ].includes(e);
      }
    },
    icon: {
      type: String,
      required: !1
    },
    iconRight: {
      type: String,
      required: !1
    },
    shadow: {
      type: Boolean,
      required: !1
    },
    disabled: {
      type: Boolean,
      required: !1
    },
    loading: {
      type: Boolean,
      required: !1
    },
    loadingIcon: {
      type: String,
      required: !1,
      default: "eos-icons:loading"
    },
    bordered: {
      type: Boolean,
      required: !1
    },
    rounded: {
      type: Boolean,
      required: !1
    },
    ghost: {
      type: Boolean,
      required: !1
    },
    flat: {
      type: Boolean,
      required: !1
    },
    light: {
      type: Boolean,
      required: !1
    },
    circle: {
      type: Boolean,
      required: !1
    },
    ripple: {
      type: Boolean,
      required: !1,
      default: !0
    }
  },
  emits: ["click"],
  setup(e, { emit: l, slots: n }) {
    const {
      size: v,
      color: r,
      shadow: p,
      bordered: o,
      rounded: k,
      ghost: c,
      flat: h,
      light: g,
      circle: b
    } = V(e), B = t(() => {
      if (!b.value)
        switch (v.value) {
          case "xs":
            return "px-2.5 py-1.5 text-xs";
          case "sm":
            return "px-3 py-2 text-sm leading-4";
          case "lg":
            return "px-4 py-2 text-base";
          case "xl":
            return "px-6 py-3 text-base";
          case "md":
          default:
            return "px-4 py-2 text-sm";
        }
    }), q = t(() => {
      if (b.value)
        switch (v.value) {
          case "xs":
            return "p-2.5 text-xs";
          case "sm":
            return "p-3 text-xs leading-4";
          case "lg":
            return "p-4 text-base";
          case "xl":
            return "p-5 text-xl";
          case "md":
          default:
            return "p-3.5 text-sm";
        }
    }), S = t(() => {
      if (!o.value && !c.value && !h.value && !g.value)
        return r.value === "secondary" ? "bg-violet-600 hover:bg-violet-700 text-white" : r.value === "success" ? "bg-green-600 hover:bg-green-700 text-white" : r.value === "warning" ? "bg-amber-500 hover:bg-amber-600 text-white" : r.value === "error" ? "bg-red-500 hover:bg-red-600 text-white" : r.value === "gradient" ? "bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 hover:from-indigo-600 hover:via-purple-600 hover:to-pink-600 text-white" : "bg-blue-600 hover:bg-blue-700 text-white";
    }), $ = t(() => {
      if (o.value && !c.value && !h.value && !g.value)
        return r.value === "secondary" ? "border border-violet-600 text-violet-600 hover:border-violet-700 hover:text-violet-800" : r.value === "success" ? "border border-green-600 text-green-600 hover:border-green-700 hover:text-green-800" : r.value === "warning" ? "border border-amber-500 text-amber-500 hover:border-amber-600 hover:text-amber-700" : r.value === "error" ? "border border-red-500 text-red-500 hover:border-red-600 hover:text-red-700" : "border border-blue-600 text-blue-600 hover:border-blue-700 hover:text-blue-800";
    }), z = t(() => {
      if (c.value && !o.value && !h.value && !g.value)
        return r.value === "secondary" ? "border border-violet-600 text-violet-600 hover:bg-violet-700 hover:text-white" : r.value === "success" ? "border border-green-600 text-green-600 hover:bg-green-700 hover:text-white" : r.value === "warning" ? "border border-amber-500 text-amber-500 hover:bg-amber-600 hover:text-white" : r.value === "error" ? "border border-red-500 text-red-500 hover:bg-red-600 hover:text-white" : "border border-blue-600 text-blue-600 hover:bg-blue-700 hover:text-white";
    }), R = t(() => {
      if (p.value)
        return r.value === "secondary" ? "shadow-lg shadow-violet-600/50 hover:shadow-violet-700/50" : r.value === "success" ? "shadow-lg shadow-green-600/50 hover:shadow-green-700/50" : r.value === "warning" ? "shadow-lg shadow-amber-500/50 hover:shadow-amber-600/50" : r.value === "error" ? "shadow-lg shadow-red-500/50 hover:shadow-red-600/50" : r.value === "gradient" ? "shadow-lg shadow-indigo-600/50 hover:shadow-indigo-700/50" : "shadow-lg shadow-blue-600/50 hover:shadow-blue-700/50";
    }), L = t(() => {
      if (h.value && !o.value && !c.value && !g.value)
        return r.value === "secondary" ? "bg-violet-400 hover:bg-violet-500 text-violet-700" : r.value === "success" ? "bg-green-400 hover:bg-green-500 text-green-700" : r.value === "warning" ? "bg-amber-400 hover:bg-amber-500 text-amber-700" : r.value === "error" ? "bg-red-400 hover:bg-red-500 text-red-700" : r.value === "gradient" ? "bg-gradient-to-r from-indigo-400 via-purple-400 to-pink-400 hover:from-indigo-500 hover:via-purple-500 hover:to-pink-500 text-white" : "bg-blue-400 hover:bg-blue-500 text-blue-700";
    }), E = t(() => {
      if (g.value && !o.value && !c.value && !h.value)
        return r.value === "secondary" ? "text-violet-600 hover:text-violet-800" : r.value === "success" ? "text-green-600 hover:text-green-800" : r.value === "warning" ? "text-amber-500 hover:text-amber-700" : r.value === "error" ? "text-red-500 hover:text-red-700" : "text-blue-600 hover:text-blue-800";
    }), F = t(() => k.value || b.value ? "rounded-full" : "rounded-md"), N = t(() => n.default && n.default().length > 0), G = "inline-flex items-center gap-1.5", I = (i) => {
      T(i), l("click", i);
    }, T = (i) => {
      const s = i.currentTarget, a = document.createElement("span"), m = Math.max(s.clientWidth, s.clientHeight), x = m / 2;
      a.style.width = a.style.height = `${m}px`, a.style.left = `${i.clientX - s.offsetLeft - x}px`, a.style.top = `${i.clientY - s.offsetTop - x}px`, a.classList.add("button-ripple");
      const y = s.getElementsByClassName("button-ripple")[0];
      y && y.remove(), s.appendChild(a);
    };
    return {
      clsButton: G,
      clsSize: B,
      clsColor: S,
      clsColorShadow: R,
      clsColorBordered: $,
      clsColorGhost: z,
      clsColorFlat: L,
      clsColorLight: E,
      clsSizeCircle: q,
      clsRounded: F,
      hasChildren: N,
      handleClick: I
    };
  }
});
const W = (e, l) => {
  const n = e.__vccOpts || e;
  for (const [v, r] of l)
    n[v] = r;
  return n;
}, X = ["disabled"], Y = ["icon"], j = { key: 2 }, A = ["icon"], D = ["icon"], J = /* @__PURE__ */ C("span", null, "Loading...", -1);
function K(e, l, n, v, r, p) {
  return d(), u("button", {
    type: "button",
    disabled: e.disabled || e.loading,
    class: H([
      e.clsButton,
      e.clsSize,
      e.clsColor,
      e.clsColorShadow,
      e.clsColorBordered,
      e.clsColorGhost,
      e.clsColorFlat,
      e.clsColorLight,
      e.clsSizeCircle,
      e.clsRounded,
      {
        "pointer-events-none opacity-70": e.disabled || e.loading,
        "relative overflow-hidden": e.ripple
      }
    ]),
    onClick: l[0] || (l[0] = (...o) => e.handleClick && e.handleClick(...o))
  }, [
    e.loading ? (d(), u(w, { key: 1 }, [
      C("iconify-icon", {
        icon: e.loadingIcon,
        class: "text-base"
      }, null, 8, D),
      J
    ], 64)) : (d(), u(w, { key: 0 }, [
      e.icon ? (d(), u("iconify-icon", {
        key: 0,
        icon: e.icon
      }, null, 8, Y)) : f(e.$slots, "icon", { key: 1 }),
      e.hasChildren ? (d(), u("span", j, [
        f(e.$slots, "default")
      ])) : M("", !0),
      e.iconRight ? (d(), u("iconify-icon", {
        key: 3,
        icon: e.iconRight
      }, null, 8, A)) : f(e.$slots, "icon-right", { key: 4 })
    ], 64))
  ], 10, X);
}
const Z = /* @__PURE__ */ W(O, [["render", K]]);
export {
  Z as UiButton
};
